---
import LaBackward from "~icons/la/backward";
import LaPlay from "~icons/la/play";
import LaForward from "~icons/la/forward";
import LaEllipsisVertical from "~icons/la/ellipsis-v";

import album from "src/content/music/siren.json";
---

<div id="container">
  <div class="player neu">
    <audio id="audio-player" src=""></audio>
    <div class="title">
      <div></div>
      <div>NOW PLAYING</div>
      <div>
        <button id="moreBtn" class="neu">
          <LaEllipsisVertical />
        </button>
      </div>
    </div>
    <div class="album-cover">
      <img src={album.cover} alt="" height="236" width="236" />
      <h2 id="song-title">{album.title}</h2>
      <h3 id="artist-title">{album.artist}</h3>
    </div>
    <div class="buttons">
      <button id="backwardBtn" class="btn lg neu">
        <LaBackward />
      </button>
      <button id="playBtn" class="btn lg neu">
        <LaPlay />
      </button>
      <button id="forwardBtn" class="btn lg neu">
        <LaForward />
      </button>
    </div>
    <div class="time-info">
      <span id="current-time">0:00</span> / <span id="duration">0:00</span>
    </div>

    <div class="track neu">
      <input type="range" id="seek-bar" value="0" min="0" step="1" />
    </div>
  </div>
  <div id="playlist" class="playlist neu">
    <h3>Playlist</h3>
    <ul id="playlist-items"></ul>
  </div>
</div>

<style>
  #container {
    display: flex;
    /* justify-content: center; */
    align-items: center;
    transition: 1s;
    filter: drop-shadow(0 0 10px var(--night))
      drop-shadow(0 0px 40px var(--van-dyke));
  }
  .player {
    width: 300px;
    height: 650px;
    background: var(--raisin-black);
    border-radius: 2em 0 0 2em;
    box-sizing: border-box;
    padding: 2em;
    display: flex;
    flex-direction: column;
  }
  .title {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    font-size: 0.75em;
    margin-bottom: 2em;
  }
  .album-cover {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }
  .album-cover img {
    width: 100%;
    border-radius: 15px;
  }
  .album-cover #song-title {
    text-align: center;
    padding-bottom: 0;
    margin-bottom: 0;
    color: var(--gray-500);
  }
  .album-cover #artist-title {
    text-align: center;
    padding: 1em 0;
    margin: 0;
    font-size: 0.85em;
    color: var(--gray-400);
  }
  .track {
    margin-top: 1em;
    height: 10px;
    input {
      width: 100%;
    }
  }
  .track div {
    width: 42%;
    height: 100%;
    background: var(--grey-500);
    opacity: 0.75;
    border-radius: 15px;
  }
  .buttons {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    padding: 1em 0;
  }
  .lyrics {
    color: #7e8a98;
    margin-top: 2em;
    text-align: center;
    font-size: 0.75em;
    display: flex;
    flex-direction: column;
  }
  .neu {
    /* filter: drop-shadow(0 0 10px var(--night))
      drop-shadow(0 0px 40px var(--van-dyke)); */
    background: var(--raisin-black);
    border: 0;
  }
  .btn {
    padding: 20px;
    border-radius: 10px;
    color: var(--gray-400);
    outline: none;
    cursor: pointer;
    filter: drop-shadow(0 0 10px var(--night))
      drop-shadow(0 0px 40px var(--van-dyke));
  }
  .btn.lg {
    font-size: 1em;
    line-height: 0;
  }
  .btn:active {
    cursor: pointer;
    filter: drop-shadow(0 0 10px var(--night))
      drop-shadow(0 0px 40px var(--van-dyke));
  }

  #playlist {
    padding: 1em;
    overflow-y: auto;
    height: 650px;
    width: 300px;
    border-radius: 0 2em 2em 0;
    background: var(--night);
    color: var(--gray-300);
    scrollbar-color: transparent;
    ul {
      padding: 0;
      margin: 0;
      li {
        list-style: none;
        cursor: pointer;
        padding: 0.5em 0;
        font-family: Amplitude;
        line-height: 1;
      }
    }
  }
  #playlist.hidden {
    display: none;
  }
  #playlist li:hover {
    color: var(--gray-100);
  }
  .current {
    color: var(--red-100);
    font-weight: bold;
  }

  #seek-bar {
    -webkit-appearance: none;
    appearance: none;
    width: 100%;
    height: 4px;
    background: #ccc;
    border-radius: 2px;
    cursor: pointer;
  }

  /* Chrome */

  #seek-bar::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    width: 16px;
    border-radius: 1px;
    background: var(--red-100);
    border: none;
    margin-top: -1px;
    cursor: pointer;
    transition: background 0.2s;
  }

  #seek-bar::-webkit-slider-thumb:hover {
    background: var(--red-300);
  }

  #seek-bar::-webkit-slider-runnable-track {
    height: 4px;
    background: var(--red-400);
    border-radius: 2px;
  }

  #seek-bar::-webkit-slider-runnable-track {
    background: linear-gradient(
      to right,
      var(--red-100) 0%,
      var(--red-100) var(--progress),
      var(--red-400) var(--progress),
      var(--red-400) 100%
    );
  }

  /* Firefox */
  #seek-bar::-moz-range-thumb {
    height: 6px;
    width: 16px;
    border-radius: 1px;
    background: var(--red-100);
    border: none;
    cursor: pointer;
    transition: background 0.2s;
  }

  #seek-bar::-moz-range-thumb:hover {
    background: var(--red-300);
  }

  #seek-bar::-moz-range-track {
    height: 4px;
    /* background: var(--red-400); */
    border-radius: 2px;
  }

  #seek-bar {
    --progress: 0%;
    background: linear-gradient(
      to right,
      var(--red-100) 0%,
      var(--red-100) var(--progress),
      var(--red-400) var(--progress),
      var(--red-400) 100%
    );
  }
</style>

<script>
  import album from "src/content/music/siren.json";

  const audio = document.getElementById("audio-player") as HTMLAudioElement;
  const playBtn = document.getElementById("playBtn") as HTMLButtonElement;
  const backwardBtn = document.getElementById(
    "backwardBtn"
  ) as HTMLButtonElement;
  const forwardBtn = document.getElementById("forwardBtn") as HTMLButtonElement;
  const seekBar = document.getElementById("seek-bar") as HTMLInputElement;
  const currentTimeEl = document.getElementById(
    "current-time"
  ) as HTMLSpanElement;
  const durationEl = document.getElementById("duration") as HTMLSpanElement;
  const songTitleEl = document.getElementById(
    "song-title"
  ) as HTMLHeadingElement;

  const playlistContainer = document.getElementById(
    "playlist"
  ) as HTMLDivElement;
  const playlistItems = document.getElementById(
    "playlist-items"
  ) as HTMLUListElement;
  const moreBtn = document.getElementById("moreBtn") as HTMLButtonElement;

  const playlist = album.tracks;
  let currentIndex = 0;

  // Fill playlist in UI
  const playlistElements: HTMLLIElement[] = [];

  playlist.forEach((track, index) => {
    const li = document.createElement("li");
    li.textContent = track.title;
    li.addEventListener("click", () => {
      loadTrack(index);
      playAudio();
    });
    playlistItems.appendChild(li);
    playlistElements.push(li);
  });

  function loadTrack(index: number) {
    currentIndex = index;

    // Highlight playlist
    playlistElements.forEach((li, i) => {
      if (i === currentIndex) {
        li.style.color = "var(--red-100)";
      } else {
        li.style.color = "";
      }
    });

    const track = playlist[currentIndex];
    audio.src = track.src;
    songTitleEl.textContent = track.title;
    audio.load();
  }

  function playAudio() {
    audio.play();
    playBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" viewBox="0 0 32 32"><!-- Icon from Line Awesome by Icons8 - https://www.apache.org/licenses/LICENSE-2.0 --><path fill="currentColor" d="M10 6v20h2V6zm10 0v20h2V6z"/></svg>`;
  }

  function pauseAudio() {
    audio.pause();
    playBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" viewBox="0 0 32 32"><!-- Icon from Line Awesome by Icons8 - https://www.apache.org/licenses/LICENSE-2.0 --><path fill="currentColor" d="M9 5.156v21.688l1.531-1L25.844 16L10.53 6.156zm2 3.657L22.156 16L11 23.188z"/></svg>`;
  }

  playBtn.addEventListener("click", () => {
    if (audio.paused) {
      playAudio();
    } else {
      pauseAudio();
    }
  });

  audio.addEventListener("loadedmetadata", () => {
    seekBar.max = Math.floor(audio.duration).toString();
    durationEl.textContent = formatTime(audio.duration);
  });

  audio.addEventListener("timeupdate", () => {
    seekBar.value = Math.floor(audio.currentTime).toString();
    currentTimeEl.textContent = formatTime(audio.currentTime);

    const percent = Math.floor((audio.currentTime / audio.duration) * 100);
    seekBar.style.setProperty("--progress", `${percent}%`);
  });

  seekBar.addEventListener("input", () => {
    audio.currentTime = Number(seekBar.value);
  });

  backwardBtn.addEventListener("click", () => {
    if (audio.currentTime < 5 && currentIndex > 0) {
      loadTrack(currentIndex - 1);
      playAudio();
    } else {
      audio.currentTime = Math.max(0, audio.currentTime - 10);
    }
  });

  forwardBtn.addEventListener("click", () => {
    if (
      audio.currentTime > audio.duration - 5 &&
      currentIndex < playlist.length - 1
    ) {
      loadTrack(currentIndex + 1);
      playAudio();
    } else {
      audio.currentTime = Math.min(audio.duration, audio.currentTime + 10);
    }
  });

  moreBtn.addEventListener("click", () => {
    togglePlaylist();
  });

  function togglePlaylist() {
    playlistContainer.classList.toggle("hidden");
  }

  function formatTime(seconds: number) {
    const m = Math.floor(seconds / 60);
    const s = Math.floor(seconds % 60)
      .toString()
      .padStart(2, "0");
    return `${m}:${s}`;
  }

  // Initially load first track
  loadTrack(0);
</script>
